{"version":3,"sources":["constants.ts","tasks.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["COLUMN_NAMES","tasks","id","name","column","Box","useDrag","item","type","drager","ref","style","width","height","margin","lineHeight","border","Dustbin","useDrop","accept","collect","minoter","isOver","collectProps","droper","bg","content","background","App","useState","isMobile","window","innerWidth","className","DndProvider","backend","TouchBackend","HTML5Backend","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAAaA,G,MACF,SCEEC,EAAQ,CACjB,CAACC,GAAI,EAAGC,KAAM,SAAUC,OAFZJ,GAGZ,CAACE,GAAI,EAAGC,KAAM,SAAUC,OAHZJ,GAIZ,CAACE,GAAI,EAAGC,KAAM,SAAUC,OAJZJ,GAKZ,CAACE,GAAI,EAAGC,KAAM,SAAUC,OALZJ,ICgLVK,EAAM,WAER,MAAmBC,YAAQ,CACvBC,KAAM,CAAEC,KAAM,SADTC,EAAT,oBAGA,OAEI,yBAAKC,IAAKD,GAAV,uCAIFE,EAAQ,CACVC,MAAO,IACPC,OAAQ,IACRC,OAAQ,aACRC,WAAY,OACZC,OAAQ,oBAGNC,EAAU,WAEZ,MAA+BC,YAAQ,CAEnCC,OAAQ,MAERC,QAAS,SAACC,GAAD,MAAc,CACnBC,OAAQD,EAAQC,aALxB,mBAAOC,EAAP,KAAqBC,EAArB,KAQMC,EAAKF,EAAaD,OAAS,WAAa,QACxCI,EAAUH,EAAaD,OAAS,yDAAc,wDACpD,OAEI,yBAAKZ,IAAKc,EAAQb,MAAK,2BAAOA,GAAP,IAAcgB,WAAYF,KAAOC,IAInDE,EAAM,WACf,MAA0BC,mBAAS5B,GAAnC,mBACM6B,GADN,UACiBC,OAAOC,WAAa,KAoCrC,OACI,yBAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAaC,QAASL,EAAWM,IAAeC,KAC5C,kBAAC,EAAD,MACA,kBAAC,EAAD,SCrPIC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.093b95ff.chunk.js","sourcesContent":["export const COLUMN_NAMES = {\n    DO_IT: 'Do it',\n    IN_PROGRESS: 'In Progress',\n    AWAITING_REVIEW: 'Awaiting review',\n    DONE: 'Done',\n}\n","import { COLUMN_NAMES } from \"./constants\";\n\nconst {DO_IT} = COLUMN_NAMES;\nexport const tasks = [\n    {id: 1, name: 'Item 1', column: DO_IT},\n    {id: 2, name: 'Item 2', column: DO_IT},\n    {id: 3, name: 'Item 3', column: DO_IT},\n    {id: 4, name: 'Item 4', column: DO_IT},\n];\n","import React, { useEffect, useRef, useState } from 'react';\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { TouchBackend } from \"react-dnd-touch-backend\";\nimport './assets/styles/App.css';\nimport { COLUMN_NAMES } from \"./constants\";\nimport { tasks } from \"./tasks\";\n\nconst MovableItem = ({ name, index, currentColumnName, moveCardHandler, setItems }) => {\n    const changeItemColumn = (currentItem, columnName) => {\n        setItems((prevState) => {\n            return prevState.map(e => {\n                return {\n                    ...e,\n                    column: e.name === currentItem.name ? columnName : e.column,\n                }\n            })\n        });\n    }\n\n    const ref = useRef(null);\n\n    const [, drop] = useDrop({\n        accept: 'Our first type',\n        hover(item: any, monitor) {\n            if (!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n            // Don't replace items with themselves\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n            // Determine rectangle on screen\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\n            // Get vertical middle\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n            // Determine mouse position\n            const clientOffset = monitor.getClientOffset();\n            // Get pixels to the top\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n            // Only perform the move when the mouse has crossed half of the items height\n            // When dragging downwards, only move when the cursor is below 50%\n            // When dragging upwards, only move when the cursor is above 50%\n            // Dragging downwards\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n            // Dragging upwards\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return;\n            }\n            // Time to actually perform the action\n            moveCardHandler(dragIndex, hoverIndex);\n            // Note: we're mutating the monitor item here!\n            // Generally it's better to avoid mutations,\n            // but it's good here for the sake of performance\n            // to avoid expensive index searches.\n            item.index = hoverIndex;\n        },\n    });\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { index, name, currentColumnName, type: 'Our first type' },\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult();\n\n            if (dropResult) {\n                const { name } = dropResult;\n                const { DO_IT, IN_PROGRESS, AWAITING_REVIEW, DONE } = COLUMN_NAMES;\n                switch (name) {\n                    case IN_PROGRESS:\n                        changeItemColumn(item, IN_PROGRESS);\n                        break;\n                    case AWAITING_REVIEW:\n                        changeItemColumn(item, AWAITING_REVIEW);\n                        break;\n                    case DONE:\n                        changeItemColumn(item, DONE);\n                        break;\n                    case DO_IT:\n                        changeItemColumn(item, DO_IT);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n\n    const opacity = isDragging ? 0.4 : 1;\n\n    drag(drop(ref));\n\n    return (\n        <div ref={ref} className='movable-item' style={{ opacity }}>\n            {name}\n        </div>\n    )\n}\n\nconst Column = ({ children, className, title }) => {\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept: 'Our first type',\n        drop: () => ({ name: title }),\n        collect: (monitor) => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n        }),\n        // Override monitor.canDrop() function\n        canDrop: (item: any) => {\n            const { DO_IT, IN_PROGRESS, AWAITING_REVIEW, DONE } = COLUMN_NAMES;\n            const { currentColumnName } = item;\n            return (currentColumnName === title) ||\n                (currentColumnName === DO_IT && title === IN_PROGRESS) ||\n                (currentColumnName === IN_PROGRESS && (title === DO_IT || title === AWAITING_REVIEW)) ||\n                (currentColumnName === AWAITING_REVIEW && (title === IN_PROGRESS || title === DONE)) ||\n                (currentColumnName === DONE && (title === AWAITING_REVIEW));\n        },\n    });\n\n    const getBackgroundColor = () => {\n        if (isOver) {\n            if (canDrop) {\n                return 'rgb(188,251,255)'\n            } else if (!canDrop) {\n                return 'rgb(255,188,188)'\n            }\n        } else {\n            return '';\n        }\n    };\n\n    return (\n        <div ref={drop} className={className} style={{ backgroundColor: getBackgroundColor() }}>\n            <p>{title}</p>\n            {children}\n        </div>\n    )\n}\n\n// const ColumnTest = ({ title }) => {\n//     const [{ isOver, canDrop }, drop] = useDrop({\n//         accept: 'Our first type',\n//         drop: () => ({ name: title }),\n//         collect: (monitor) => ({\n//             isOver: monitor.isOver(),\n//             canDrop: monitor.canDrop(),\n//         }),\n//         // Override monitor.canDrop() function\n//         canDrop: (item: any) => {\n//             return true;\n//         },\n//     });\n\n//     const getBackgroundColor = () => {\n//         if (isOver) {\n//             if (canDrop) {\n//                 return 'rgb(188,251,255)'\n//             } else if (!canDrop) {\n//                 return 'rgb(255,188,188)'\n//             }\n//         } else {\n//             return '';\n//         }\n//     };\n\n//     return (\n//         <div ref={drop} className='movable-item' style={{ backgroundColor: getBackgroundColor() }}>\n//             <p>{title}</p>\n//         </div>\n//     )\n// }\n\nconst Box = () => {\n    // 使用 useDrag\n    const [, drager] = useDrag({\n        item: { type: 'Box' }\n    })\n    return (\n        // 将第二个参数赋值给 ref\n        <div ref={drager}>可拖拽组件 Box</div>\n    )\n}\n\nconst style = {\n    width: 400,\n    height: 400,\n    margin: '100px auto',\n    lineHeight: '60px',\n    border: '1px dashed black'\n}\n\nconst Dustbin = () => {\n    // 第一个参数是 collect 方法返回的对象，第二个参数是一个 ref 值，赋值给 drop 元素\n    const [collectProps, droper] = useDrop({\n        // accept 是一个标识，需要和对应的 drag 元素中 item 的 type 值一致，否则不能感应\n        accept: 'Box',\n        // collect 函数，返回的对象会成为 useDrop 的第一个参数，可以在组件中直接进行使用\n        collect: (minoter) => ({\n            isOver: minoter.isOver()\n        })\n    })\n    const bg = collectProps.isOver ? 'deeppink' : 'white';\n    const content = collectProps.isOver ? '快松开，放到碗里来' : '将 Box 组件拖动到这里'\n    return (\n        // 将 droper 赋值给对应元素的 ref\n        <div ref={droper} style={{ ...style, background: bg }}>{content}</div>\n    )\n}\n\nexport const App = () => {\n    const [items, setItems] = useState(tasks);\n    const isMobile = window.innerWidth < 600;\n\n    const moveCardHandler = (dragIndex, hoverIndex) => {\n        const dragItem = items[dragIndex];\n\n        if (dragItem) {\n            setItems((prevState => {\n                const coppiedStateArray = [...prevState];\n\n                // remove item by \"hoverIndex\" and put \"dragItem\" instead\n                const prevItem = coppiedStateArray.splice(hoverIndex, 1, dragItem);\n\n                // remove item by \"dragIndex\" and put \"prevItem\" instead\n                coppiedStateArray.splice(dragIndex, 1, prevItem[0]);\n\n                return coppiedStateArray;\n            }));\n        }\n    };\n\n    const returnItemsForColumn = (columnName) => {\n        return items\n            .filter((item) => item.column === columnName)\n            .map((item, index) => (\n                <MovableItem key={item.id}\n                    name={item.name}\n                    currentColumnName={item.column}\n                    setItems={setItems}\n                    index={index}\n                    moveCardHandler={moveCardHandler}\n                />\n            ))\n    }\n\n    const { DO_IT, IN_PROGRESS, AWAITING_REVIEW, DONE } = COLUMN_NAMES;\n\n    return (\n        <div className=\"container\">\n            <DndProvider backend={isMobile ? TouchBackend : HTML5Backend}>\n                <Box />\n                <Dustbin />\n                {/* <Column title={DO_IT} className='column do-it-column'>\n                    {returnItemsForColumn(DO_IT)}\n                </Column>\n                <Column title={IN_PROGRESS} className='column in-progress-column'>\n                    {returnItemsForColumn(IN_PROGRESS)}\n                </Column>\n                <Column title={AWAITING_REVIEW} className='column awaiting-review-column'>\n                    {returnItemsForColumn(AWAITING_REVIEW)}\n                </Column>\n                <Column title={DONE} className='column done-column'>\n                    {returnItemsForColumn(DONE)}\n                </Column> */}\n            </DndProvider>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}